<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_262366_wld_bldr_creatures</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_262366_wld_bldr_creatures">creatureCHANGESFROM^creatureISNOTEMPTY^EQ<item endquery="false" field="creature" goto="false" newquery="false" operator="CHANGESFROM" or="false" value=""/>
            <item endquery="false" field="creature" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Initialize Creature</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var multipleCreatures = new GlideRecord('x_262366_wld_bldr_creatures');
	multipleCreatures.addQuery('creature', current.creature);
	multipleCreatures.query();
	
	current.name = current.creature.getDisplayValue() + ' ' + (multipleCreatures.getRowCount() + 1);
	current.armor_class = current.creature.armor_class;
	
	//get random alignment out of options from compendium
	var alignments = current.creature.alignment.split(',');
	var randNum = Math.floor(Math.random()*(alignments.length));
	for(var j = 0; j < alignments.length; ++j){
		if(j==randNum){
			current.alignment = alignments[j];
		}
	}
	
	current.strength = current.creature.strength;	
	current.dexterity = current.creature.dexterity;	
	current.constitution = current.creature.constitution;	
	current.intelligence = current.creature.intelligence;	
	current.wisdom = current.creature.wisdom;	
	current.charisma = current.creature.charisma;
	
	var baseHP = current.creature.hit_points;
	var con = current.creature.constitution_modifier;
	var hitDie = current.creature.size.hit_die;
	var hitDieMod = (hitDie + 1)/2;

	for(var i = 1; i <= 50; ++i){
		if(Math.floor(i*hitDieMod + i*con) == baseHP){
			var randHP = (new RollDice().RollDice(i,hitDie,'sum')) + i*con;
			current.max_hit_points = randHP;
			current.current_hit_points = randHP;
			i = 51;
		}
	}

	var cr = current.creature.challenge_rating;
	var roll1 = new RollDice().RollDice(1,100,'sum');
	var roll2 = new RollDice().RollDice(1,100,'sum');

	var magicItems = [];

	if(cr <= 4){
		if(roll1 <= 30){
			current.copper = new RollDice().RollDice(5,6,'sum');
		}
		else if(roll1 <= 60){
			current.silver = new RollDice().RollDice(4,6,'sum');
		}
		else if(roll1 <= 70){
			current.silver = (new RollDice().RollDice(4,6,'sum'))*5;
		}
		else if(roll1 <= 95){
			current.gold = new RollDice().RollDice(3,6,'sum');
		}
		else{
			current.gold = (new RollDice().RollDice(1,6,'sum'))*10;
		}

		if(roll2 >= 50){
			magicItems.push('common');
		}

		if(roll2 >80){
			magicItems.push('common');
		}

		if(roll2 >= 99){
			magicItems.push('uncommon');
		}

		if(roll2 == 100){
			magicItems.push('uncommon');
		}

	}
	else if(cr <= 10){
		if(roll1 <= 30){
			current.copper = new RollDice().RollDice(4,6,'sum')*100;
			current.silver = new RollDice().RollDice(1,6,'sum')*50;	
		}
		else if(roll1 <= 60){
			current.silver = new RollDice().RollDice(6,6,'sum')*10;
			current.gold = new RollDice().RollDice(2,6,'sum')*10;
		}
		else if(roll1 <= 70){
			current.silver = (new RollDice().RollDice(3,6,'sum'))*50;
			current.gold = new RollDice().RollDice(2,6,'sum')*10;
		}
		else if(roll1 <= 95){
			current.gold = new RollDice().RollDice(4,6,'sum')*10;
		}
		else{
			current.gold = ((new RollDice().RollDice(2,6,'sum'))*10) + ((new RollDice().RollDice(3,6,'sum'))*10);
		}


		if(roll2 >= 5){
			for(var ii = 0; ii < (new RollDice().RollDice(1,6,'sum')); ++ii){
				magicItems.push('common');
			}
		}

		if(roll2 > 44){
			for(var ii = 0; ii < (new RollDice().RollDice(1,4,'sum')); ++ii){
				magicItems.push('uncommon');
			}
		}

		if(roll2 > 81){
			for(var ii = 0; ii < (new RollDice().RollDice(1,4,'sum')); ++ii){
				magicItems.push('rare');
			}
		}

		if(roll2 >= 99){
			magicItems.push('very rare');
		}
	}
	else if(cr <= 16){
		if(roll1 <= 20){
			current.silver = new RollDice().RollDice(4,6,'sum')*100;	
			current.gold = new RollDice().RollDice(1,6,'sum')*100;
		}
		else if(roll1 <= 35){
			current.silver = new RollDice().RollDice(1,6,'sum')*500;
			current.gold = new RollDice().RollDice(1,6,'sum')*100;
		}
		else if(roll1 <= 75){
			current.gold = ((new RollDice().RollDice(2,6,'sum'))*100) + ((new RollDice().RollDice(1,6,'sum'))*100);
		}
		else if(roll1 <= 100){
			current.gold = ((new RollDice().RollDice(2,6,'sum'))*100) + ((new RollDice().RollDice(2,6,'sum'))*100);
		}

		if(roll2 >= 4){
			for(var ii = 0; ii < (new RollDice().RollDice(1,4,'sum')); ++ii){
				magicItems.push('common');
			}
		}

		if(roll2 > 15){
			for(var ii = 0; ii < (new RollDice().RollDice(1,4,'sum')); ++ii){
				magicItems.push('common');
			}
			for(var ii = 0; ii < (new RollDice().RollDice(1,6,'sum')); ++ii){
				magicItems.push('uncommon');
			}
		}

		if(roll2 >= 30){
			for(var ii = 0; ii < (new RollDice().RollDice(1,6,'sum')); ++ii){
				magicItems.push('rare');
			}
		}

		if(roll2 >= 69){
			magicItems.push('very rare');
		}

		if(roll2 >= 75 && roll2 <= 82){
			magicItems.push('very rare');
			for(var ii = 0; ii < (new RollDice().RollDice(1,4,'sum')); ++ii){
				magicItems.push('very rare');
			}
		}

		if(roll2 >= 83 && roll2 <= 92){
			magicItems.push('very rare');
			magicItems.push('very rare');
			magicItems.push('very rare');
			for(var ii = 0; ii < (new RollDice().RollDice(1,4,'sum')); ++ii){
				magicItems.push('very rare');
			}
		}

		if(roll2 >= 83){
			magicItems.push('legendary');
		}

	}
	else if(cr >= 17){
		if(roll1 <= 15){
			current.silver = new RollDice().RollDice(2,6,'sum')*5000;	
			current.gold = new RollDice().RollDice(8,6,'sum')*100;
		}
		else if(roll1 <= 55){
			current.gold = ((new RollDice().RollDice(2,6,'sum'))*100) + ((new RollDice().RollDice(1,6,'sum'))*1000);
		}
		else{
			current.gold = ((new RollDice().RollDice(1,6,'sum'))*1000) + ((new RollDice().RollDice(2,6,'sum'))*1000);
		}

		if(roll2 >= 2 && roll2 <= 14){
			for(var ii = 0; ii < (new RollDice().RollDice(1,8,'sum')); ++ii){
				magicItems.push('uncommon');
			}
		}

		if(roll2 >= 15){
			for(var ii = 0; ii < (new RollDice().RollDice(1,6,'sum')); ++ii){
				magicItems.push('rare');
			}
		}

		if(roll2 >= 47){
			for(var ii = 0; ii < (new RollDice().RollDice(1,6,'sum')); ++ii){
				magicItems.push('very rare');
			}
		}

		if(roll2 >= 69 && roll2 <= 72){
			magicItems.push('legendary');
		}

		if(roll2 >= 73 && roll2 <= 80){
			magicItems.push('legendary');
			magicItems.push('legendary');
		}

		if(roll2 >= 81 && roll2 <= 90){
			magicItems.push('legendary');
			magicItems.push('legendary');
			magicItems.push('legendary');
		}

		if(roll2 >= 91){
			magicItems.push('legendary');
			magicItems.push('legendary');
			magicItems.push('legendary');
			magicItems.push('legendary');
		}

	}

	for(var i = 0; i < magicItems.length; ++i){
		var item = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_item', 'rarity', magicItems[i]);
		var ownedItem = new GlideRecord('x_262366_wld_bldr_owned_item');
		ownedItem.initialize();
		ownedItem.creature = current.sys_id;
		ownedItem.item = item;

		if(item == 'd89941a4db53f38049ac7e7dbf961921'){ //cantrip
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', '7d794748db90230049ac7e7dbf9619d0');
		}
		else if(item == '1c9941a4db53f38049ac7e7dbf961922'){ //1
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', '95a41e81db5c230049ac7e7dbf961939');
		}
		else if(item == 'dc9941a4db53f38049ac7e7dbf961922'){ //2
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', 'e6946874db10230049ac7e7dbf961937');
		}
		else if(item == '909941a4db53f38049ac7e7dbf961923'){ //3
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', '2ed21e41db5c230049ac7e7dbf9619dd');
		}
		else if(item == '549941a4db53f38049ac7e7dbf961923'){ //4
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', '69e25a01db5c230049ac7e7dbf9619d7');
		}
		else if(item == '189941a4db53f38049ac7e7dbf961923'){ //5
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', '1be21641db5c230049ac7e7dbf9619eb');
		}
		else if(item == 'd89941a4db53f38049ac7e7dbf961923'){ //6
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', '76f2de01db5c230049ac7e7dbf961919');
		}
		else if(item == '9c9941a4db53f38049ac7e7dbf961923'){ //7
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', 'b803da01db5c230049ac7e7dbf961928');
		}
		else if(item == '509941a4db53f38049ac7e7dbf961924'){ //8
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', '62035e01db5c230049ac7e7dbf9619eb');
		}
		else if(item == '149941a4db53f38049ac7e7dbf961924'){ //9
			ownedItem.spell = new GenerateRandomNPC().GetSpecificRandomRecordInTable('x_262366_wld_bldr_spell', 'level', 'ec13da41db5c230049ac7e7dbf9619a0');
		}

		ownedItem.insert();
	}
	
	if(current.encounter){
		var addCreature = new GlideRecord('x_262366_wld_bldr_encountered_creature');
		addCreature.initialize();
		addCreature.name = current.name;
		addCreature.creature = current.sys_id;
		addCreature.initiative = parseFloat(new RollDice().RollDice(1,20,'sum')) + parseFloat(current.creature.dexterity_modifier); //TODO: add initiative bonuses
		addCreature.max_hit_points = current.max_hit_points;
		addCreature.current_hit_points = current.current_hit_points;
		addCreature.armor_class = current.armor_class;
		addCreature.encounter = current.encounter;
		addCreature.insert();
		current.encounter = '';
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-08-15 18:30:53</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>79ba2795db57778049ac7e7dbf9619d7</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>Initialize Creature</sys_name>
        <sys_overrides/>
        <sys_package display_value="World Builder" source="x_262366_wld_bldr">b3fcc508dbf3130049ac7e7dbf96195b</sys_package>
        <sys_policy/>
        <sys_scope display_value="World Builder">b3fcc508dbf3130049ac7e7dbf96195b</sys_scope>
        <sys_update_name>sys_script_79ba2795db57778049ac7e7dbf9619d7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-15 21:42:38</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=79ba2795db57778049ac7e7dbf9619d7"/>
</record_update>
